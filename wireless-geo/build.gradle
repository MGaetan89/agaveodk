import dependencies.Dependencies
import dependencies.Versions
import groovy.sql.Sql

apply plugin: 'com.android.library'
apply from: '../config/quality.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'de.undercouch.download'
//apply plugin: "com.google.android.gms.oss-licenses-plugin"


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

android {
    namespace "org.odk.collect.wirelessgeo"
    compileSdkVersion Versions.android_compile_sdk
    defaultConfig {
        minSdkVersion Versions.android_min_sdk
        targetSdkVersion Versions.android_target_sdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/ASL2.0', 'META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/LICENSE.txt', 'META-INF/MANIFEST.MF']
        }
    }

}

configurations {
    driver
}

dependencies {
    driver 'org.xerial:sqlite-jdbc:3.42.0.0'
}

// make a driver copy, per https://stackoverflow.com/questions/51676049/cannot-change-strategy-of-configuration-sqlite
URLClassLoader loader = GroovyObject.class.classLoader
def driverCopy = configurations.driver.copy()
driverCopy.each {File file -> loader.addURL(file.toURI().toURL())}

ext {
    inputMxcSqlDir = "etc/mccmncsqlite"
    outputMxcDbFile = "$projectDir/src/main/assets/mmcmnc.sqlite"
    mxcDictionaryFile = "$inputMxcSqlDir/mcc-mnc-dict.json"
}

dependencies {
    implementation Dependencies.kotlin_stdlib
    implementation Dependencies.timber
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.legacy:legacy-support-core-utils:1.0.0"
    implementation "androidx.core:core:1.6.0"
    implementation "androidx.appcompat:appcompat:1.4.2"
    implementation "com.google.android.material:material:1.6.0"
    implementation "com.google.android.gms:play-services-maps:18.1.0"
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-location:15.0.1'
    implementation 'com.google.code.gson:gson:2.8.9'
//    implementation 'org.slf4j:slf4j-android:1.7.19'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.goebl:simplify:1.0.0'
    implementation 'com.google.maps.android:android-maps-utils:3.1.1'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.1'
    implementation 'org.apache.commons:commons-text:1.7'
    implementation project(path: ':permissions')
    implementation project(path: ':location')
}


import groovy.json.JsonSlurper
import groovy.sql.Sql

import java.sql.SQLException

//TODO: this runs every time, which isn't optimal. just needs to run before build
//task downloadFile (type: Download) {
//    println "downloading mcc/mnc data"
//    download {
//        src 'https://api.wigle.net/api/v2/cell/mccMnc'
//        dest "../$mxcDictionaryFile"
//        overwrite true
//        acceptAnyCertificate true /* horrible, but alternative is update trust store <=> letsencrypt */
//    }
//}
//
//task createMccMncDB (dependsOn: 'downloadFile') {
//    ext.loadScript = { sql, file ->
//        println("Applying " + file)
//        String[] sqlcmds = file.text.split(";")
//        sqlcmds.collect{it.trim()}.findAll{!it.isEmpty() && !it.startsWith("--")}.each{
//            try {
//                sql.execute(it)
//            } catch(SQLException e) {
//                System.err << "Invalid SQL statement: " + it
//                e.printStackTrace(System.err)
//                throw new GradleException('Preformulated MCC/MNC Database SQL Failure.')
//            }
//        }
//    }
//
//    delete outputMxcDbFile
//    def sql = Sql.newInstance("jdbc:sqlite:$outputMxcDbFile",'','','org.sqlite.JDBC')
//    new File("$inputMxcSqlDir/").eachFileMatch(~/.*\.sql/) {loadScript(sql, it)}
//    def inputFile = new File("$mxcDictionaryFile")
//    def mccMap = new JsonSlurper().parseText(inputFile.text)
//    def insertSql = 'INSERT OR REPLACE INTO wigle_mcc_mnc (mcc, mnc, type, countryName, countryCode, brand, operator, status, bands, notes) VALUES (?,?,?,?,?,?,?,?,?,?)'
//    def myKeyNames = ['mcc', 'mnc']
//    mccMap.each { mcc, mncMap ->
//        //DEBUG: println "mcc: $mcc"
//        mncMap.each {mnc, value ->
//            //DEBUG: println "\tmnc: $mnc"
//            //DEBUG: println "\t\tvalue: $value"
//            def type = value?.type
//            def countryName = value?.countryName
//            def countryCode = value?.countryCode
//            def brand = value?.brand
//            def operator = value?.operator
//            def status = value?.status
//            def bands = value?.bands
//            def notes = value?.notes
//            def params = [mcc, mnc, type, countryName, countryCode, brand, operator, status, bands, notes]
//            sql.executeInsert insertSql, params, myKeyNames
//        }
//    }
//    sql.close()
//}
