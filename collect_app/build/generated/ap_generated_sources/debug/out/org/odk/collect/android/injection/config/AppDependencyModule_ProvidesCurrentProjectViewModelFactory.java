// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.odk.collect.android.activities.viewmodels.CurrentProjectViewModel;
import org.odk.collect.android.application.initialization.AnalyticsInitializer;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.storage.StoragePathProvider;
import org.odk.collect.projects.ProjectsRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppDependencyModule_ProvidesCurrentProjectViewModelFactory implements Factory<CurrentProjectViewModel.Factory> {
  private final AppDependencyModule module;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  private final Provider<AnalyticsInitializer> analyticsInitializerProvider;

  private final Provider<StoragePathProvider> storagePathProvider;

  private final Provider<ProjectsRepository> projectsRepositoryProvider;

  public AppDependencyModule_ProvidesCurrentProjectViewModelFactory(AppDependencyModule module,
      Provider<CurrentProjectProvider> currentProjectProvider,
      Provider<AnalyticsInitializer> analyticsInitializerProvider,
      Provider<StoragePathProvider> storagePathProvider,
      Provider<ProjectsRepository> projectsRepositoryProvider) {
    this.module = module;
    this.currentProjectProvider = currentProjectProvider;
    this.analyticsInitializerProvider = analyticsInitializerProvider;
    this.storagePathProvider = storagePathProvider;
    this.projectsRepositoryProvider = projectsRepositoryProvider;
  }

  @Override
  public CurrentProjectViewModel.Factory get() {
    return providesCurrentProjectViewModel(module, currentProjectProvider.get(), analyticsInitializerProvider.get(), storagePathProvider.get(), projectsRepositoryProvider.get());
  }

  public static AppDependencyModule_ProvidesCurrentProjectViewModelFactory create(
      AppDependencyModule module, Provider<CurrentProjectProvider> currentProjectProvider,
      Provider<AnalyticsInitializer> analyticsInitializerProvider,
      Provider<StoragePathProvider> storagePathProvider,
      Provider<ProjectsRepository> projectsRepositoryProvider) {
    return new AppDependencyModule_ProvidesCurrentProjectViewModelFactory(module, currentProjectProvider, analyticsInitializerProvider, storagePathProvider, projectsRepositoryProvider);
  }

  public static CurrentProjectViewModel.Factory providesCurrentProjectViewModel(
      AppDependencyModule instance, CurrentProjectProvider currentProjectProvider,
      AnalyticsInitializer analyticsInitializer, StoragePathProvider storagePathProvider,
      ProjectsRepository projectsRepository) {
    return Preconditions.checkNotNullFromProvides(instance.providesCurrentProjectViewModel(currentProjectProvider, analyticsInitializer, storagePathProvider, projectsRepository));
  }
}
