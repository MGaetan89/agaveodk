// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.odk.collect.android.formmanagement.InstancesAppState;
import org.odk.collect.android.gdrive.GoogleAccountsManager;
import org.odk.collect.android.gdrive.GoogleApiProvider;
import org.odk.collect.android.instancemanagement.autosend.InstanceAutoSender;
import org.odk.collect.android.notifications.Notifier;
import org.odk.collect.androidshared.network.NetworkStateProvider;
import org.odk.collect.permissions.PermissionsProvider;
import org.odk.collect.settings.SettingsProvider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppDependencyModule_ProvidesInstanceAutoSenderFactory implements Factory<InstanceAutoSender> {
  private final AppDependencyModule module;

  private final Provider<NetworkStateProvider> networkStateProvider;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<Context> contextProvider;

  private final Provider<Notifier> notifierProvider;

  private final Provider<GoogleAccountsManager> googleAccountsManagerProvider;

  private final Provider<GoogleApiProvider> googleApiProvider;

  private final Provider<PermissionsProvider> permissionsProvider;

  private final Provider<InstancesAppState> instancesAppStateProvider;

  public AppDependencyModule_ProvidesInstanceAutoSenderFactory(AppDependencyModule module,
      Provider<NetworkStateProvider> networkStateProvider,
      Provider<SettingsProvider> settingsProvider, Provider<Context> contextProvider,
      Provider<Notifier> notifierProvider,
      Provider<GoogleAccountsManager> googleAccountsManagerProvider,
      Provider<GoogleApiProvider> googleApiProvider,
      Provider<PermissionsProvider> permissionsProvider,
      Provider<InstancesAppState> instancesAppStateProvider) {
    this.module = module;
    this.networkStateProvider = networkStateProvider;
    this.settingsProvider = settingsProvider;
    this.contextProvider = contextProvider;
    this.notifierProvider = notifierProvider;
    this.googleAccountsManagerProvider = googleAccountsManagerProvider;
    this.googleApiProvider = googleApiProvider;
    this.permissionsProvider = permissionsProvider;
    this.instancesAppStateProvider = instancesAppStateProvider;
  }

  @Override
  public InstanceAutoSender get() {
    return providesInstanceAutoSender(module, networkStateProvider.get(), settingsProvider.get(), contextProvider.get(), notifierProvider.get(), googleAccountsManagerProvider.get(), googleApiProvider.get(), permissionsProvider.get(), instancesAppStateProvider.get());
  }

  public static AppDependencyModule_ProvidesInstanceAutoSenderFactory create(
      AppDependencyModule module, Provider<NetworkStateProvider> networkStateProvider,
      Provider<SettingsProvider> settingsProvider, Provider<Context> contextProvider,
      Provider<Notifier> notifierProvider,
      Provider<GoogleAccountsManager> googleAccountsManagerProvider,
      Provider<GoogleApiProvider> googleApiProvider,
      Provider<PermissionsProvider> permissionsProvider,
      Provider<InstancesAppState> instancesAppStateProvider) {
    return new AppDependencyModule_ProvidesInstanceAutoSenderFactory(module, networkStateProvider, settingsProvider, contextProvider, notifierProvider, googleAccountsManagerProvider, googleApiProvider, permissionsProvider, instancesAppStateProvider);
  }

  public static InstanceAutoSender providesInstanceAutoSender(AppDependencyModule instance,
      NetworkStateProvider networkStateProvider, SettingsProvider settingsProvider, Context context,
      Notifier notifier, GoogleAccountsManager googleAccountsManager,
      GoogleApiProvider googleApiProvider, PermissionsProvider permissionsProvider,
      InstancesAppState instancesAppState) {
    return Preconditions.checkNotNullFromProvides(instance.providesInstanceAutoSender(networkStateProvider, settingsProvider, context, notifier, googleAccountsManager, googleApiProvider, permissionsProvider, instancesAppState));
  }
}
