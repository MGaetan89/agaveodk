// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.odk.collect.android.logic.PropertyManager;
import org.odk.collect.android.utilities.DeviceDetailsProvider;
import org.odk.collect.permissions.PermissionsProvider;
import org.odk.collect.settings.SettingsProvider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppDependencyModule_ProvidesPropertyManagerFactory implements Factory<PropertyManager> {
  private final AppDependencyModule module;

  private final Provider<PermissionsProvider> permissionsProvider;

  private final Provider<DeviceDetailsProvider> deviceDetailsProvider;

  private final Provider<SettingsProvider> settingsProvider;

  public AppDependencyModule_ProvidesPropertyManagerFactory(AppDependencyModule module,
      Provider<PermissionsProvider> permissionsProvider,
      Provider<DeviceDetailsProvider> deviceDetailsProvider,
      Provider<SettingsProvider> settingsProvider) {
    this.module = module;
    this.permissionsProvider = permissionsProvider;
    this.deviceDetailsProvider = deviceDetailsProvider;
    this.settingsProvider = settingsProvider;
  }

  @Override
  public PropertyManager get() {
    return providesPropertyManager(module, permissionsProvider.get(), deviceDetailsProvider.get(), settingsProvider.get());
  }

  public static AppDependencyModule_ProvidesPropertyManagerFactory create(
      AppDependencyModule module, Provider<PermissionsProvider> permissionsProvider,
      Provider<DeviceDetailsProvider> deviceDetailsProvider,
      Provider<SettingsProvider> settingsProvider) {
    return new AppDependencyModule_ProvidesPropertyManagerFactory(module, permissionsProvider, deviceDetailsProvider, settingsProvider);
  }

  public static PropertyManager providesPropertyManager(AppDependencyModule instance,
      PermissionsProvider permissionsProvider, DeviceDetailsProvider deviceDetailsProvider,
      SettingsProvider settingsProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesPropertyManager(permissionsProvider, deviceDetailsProvider, settingsProvider));
  }
}
