// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.app.Application;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.odk.collect.android.activities.viewmodels.MainMenuViewModel;
import org.odk.collect.android.formmanagement.InstancesAppState;
import org.odk.collect.android.version.VersionInformation;
import org.odk.collect.async.Scheduler;
import org.odk.collect.settings.SettingsProvider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppDependencyModule_ProvidesMainMenuViewModelFactoryFactory implements Factory<MainMenuViewModel.Factory> {
  private final AppDependencyModule module;

  private final Provider<VersionInformation> versionInformationProvider;

  private final Provider<Application> applicationProvider;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<InstancesAppState> instancesAppStateProvider;

  private final Provider<Scheduler> schedulerProvider;

  public AppDependencyModule_ProvidesMainMenuViewModelFactoryFactory(AppDependencyModule module,
      Provider<VersionInformation> versionInformationProvider,
      Provider<Application> applicationProvider, Provider<SettingsProvider> settingsProvider,
      Provider<InstancesAppState> instancesAppStateProvider,
      Provider<Scheduler> schedulerProvider) {
    this.module = module;
    this.versionInformationProvider = versionInformationProvider;
    this.applicationProvider = applicationProvider;
    this.settingsProvider = settingsProvider;
    this.instancesAppStateProvider = instancesAppStateProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public MainMenuViewModel.Factory get() {
    return providesMainMenuViewModelFactory(module, versionInformationProvider.get(), applicationProvider.get(), settingsProvider.get(), instancesAppStateProvider.get(), schedulerProvider.get());
  }

  public static AppDependencyModule_ProvidesMainMenuViewModelFactoryFactory create(
      AppDependencyModule module, Provider<VersionInformation> versionInformationProvider,
      Provider<Application> applicationProvider, Provider<SettingsProvider> settingsProvider,
      Provider<InstancesAppState> instancesAppStateProvider,
      Provider<Scheduler> schedulerProvider) {
    return new AppDependencyModule_ProvidesMainMenuViewModelFactoryFactory(module, versionInformationProvider, applicationProvider, settingsProvider, instancesAppStateProvider, schedulerProvider);
  }

  public static MainMenuViewModel.Factory providesMainMenuViewModelFactory(
      AppDependencyModule instance, VersionInformation versionInformation, Application application,
      SettingsProvider settingsProvider, InstancesAppState instancesAppState, Scheduler scheduler) {
    return Preconditions.checkNotNullFromProvides(instance.providesMainMenuViewModelFactory(versionInformation, application, settingsProvider, instancesAppState, scheduler));
  }
}
